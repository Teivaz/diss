% Limits
ClusterLimits.StartTime = [3, 30];          % ns
ClusterLimits.IntervalTime = [1, 15];       % ns
ClusterLimits.StartPower = [0.05, 1];       % V
ClusterLimits.DecayPower = [1, 10];       % 
ClusterLimits.Number = [2, 15];              % 

rnd = @(a) a(1) + (a(2)-a(1)).*rand(1,1);
rndi = @(a) a(1) + randi((a(2)-a(1)),1,1);

lb = [...
	1.5,...
	ClusterLimits.IntervalTime(1),...
	1,...
	ClusterLimits.DecayPower(1),...
	1,...
	ClusterLimits.StartTime(1),...
	ClusterLimits.IntervalTime(1),...
	ClusterLimits.StartPower(1),...
	ClusterLimits.DecayPower(1),...
	ClusterLimits.Number(1),...
	ClusterLimits.StartTime(1),...
	ClusterLimits.IntervalTime(1),...
	ClusterLimits.StartPower(1),...
	ClusterLimits.DecayPower(1),...
	ClusterLimits.Number(1),...
	ClusterLimits.StartTime(1),...
	ClusterLimits.IntervalTime(1),...
	ClusterLimits.StartPower(1),...
	ClusterLimits.DecayPower(1),...
	ClusterLimits.Number(1),...
	ClusterLimits.StartTime(1),...
	ClusterLimits.IntervalTime(1),...
	ClusterLimits.StartPower(1),...
	ClusterLimits.DecayPower(1),...
	ClusterLimits.Number(1)];

ub = [...
	2.8,...
	ClusterLimits.IntervalTime(2),...
	1,...
	ClusterLimits.DecayPower(2),...
	1,...
	ClusterLimits.StartTime(2),...
	ClusterLimits.IntervalTime(2),...
	ClusterLimits.StartPower(2),...
	ClusterLimits.DecayPower(2),...
	ClusterLimits.Number(2),...
	ClusterLimits.StartTime(2),...
	ClusterLimits.IntervalTime(2),...
	ClusterLimits.StartPower(2),...
	ClusterLimits.DecayPower(2),...
	ClusterLimits.Number(2),...
	ClusterLimits.StartTime(2),...
	ClusterLimits.IntervalTime(2),...
	ClusterLimits.StartPower(2),...
	ClusterLimits.DecayPower(2),...
	ClusterLimits.Number(2),...
	ClusterLimits.StartTime(2),...
	ClusterLimits.IntervalTime(2),...
	ClusterLimits.StartPower(2),...
	ClusterLimits.DecayPower(2),...
	ClusterLimits.Number(2)];

clear args;
args(1)  = rnd(ClusterLimits.StartTime);   
args(2)  = rnd(ClusterLimits.IntervalTime);
args(3)  = rnd(ClusterLimits.StartPower);  
args(4)  = rnd(ClusterLimits.DecayPower);  
args(5)  = rndi(ClusterLimits.Number);     
args(6)  = rnd(ClusterLimits.StartTime);   
args(7)  = rnd(ClusterLimits.IntervalTime);
args(8)  = rnd(ClusterLimits.StartPower);  
args(9)  = rnd(ClusterLimits.DecayPower);  
args(10) = rndi(ClusterLimits.Number);     
args(11) = rnd(ClusterLimits.StartTime);   
args(12) = rnd(ClusterLimits.IntervalTime);
args(13) = rnd(ClusterLimits.StartPower);  
args(14) = rnd(ClusterLimits.DecayPower);  
args(15) = rndi(ClusterLimits.Number);     
args(16) = rnd(ClusterLimits.StartTime);   
args(17) = rnd(ClusterLimits.IntervalTime);
args(18) = rnd(ClusterLimits.StartPower);  
args(19) = rnd(ClusterLimits.DecayPower);  
args(20) = rndi(ClusterLimits.Number);     
args(21) = rnd(ClusterLimits.StartTime);   
args(22) = rnd(ClusterLimits.IntervalTime);
args(23) = rnd(ClusterLimits.StartPower);  
args(24) = rnd(ClusterLimits.DecayPower);  
args(25) = rndi(ClusterLimits.Number);     

%gaOpt = gaoptimset('PlotFcns', @gaplotbestfun, 'PlotInterval', 5, 'PopInitRange', [lb; ub]);
gaOpt = gaoptimset( 'PlotFcns', @PlotClusters,...
                    'PlotInterval', 10,...
                    'PopInitRange', [lb; ub],...
                    'PopulationSize', 100,...
                    'EliteCount', 6,...
                    'TolFun', 0,...
                    'PopulationType', 'doubleVector',... 
                    'Generations', 1000,...
                    'CrossoverFraction',0.53);
                
if exist('population')
    gaOpt.InitialPopulation = population;
end
n = 4;
for a = 1:n
    [X, f, exitflag, output, population] = ga(@CostStraigntCompare, numel(args), [], [], [], [], lb, ub, [], gaOpt);
    gaOpt.InitialPopulation = population;
end
[fit, y1, y2, x] = CostStraigntCompare( X );
semilogy(x, y1, x, y2);
title([' Fitness: ' num2str(f)]);


%%
%options = optimset('TolFun', 60, 'MaxFunEvals', 1000);
%[X, f] = fmincon(@CostStraigntCompare, args, [], [], [], [], lb, ub, [], options);

figure(3);
[fit, y1, y2, x, fity, clstrs] = CostStraigntCompare( X );
semilogy(x, y1, x, y2);
%semilogy(x, y2);

colors = hsv(5);
hold on;
for a = 1:numel(clstrs)
    h = stem(clstrs(a).x + 2.2e-9, clstrs(a).y);
    set(h, 'color', colors(a,:));
    set(get(h,'BaseLine'),'BaseValue',1e-3);
end
hold off
xlim([0, 5e-8])
ylim([1e-3, 1])



